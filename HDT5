# -*- coding: cp1252 -*-
#Autores: Diego Valdez, 15397 ; Sang Woo Shin, 15372
#
#------------------------------------------

import simpy
from random import uniform, Random
global ram, vel, azar, cpuC
         

def new(env, tgen, mem, name, ins):
    # new        
    yield env.timeout(tgen)
    print('%5.1f %s solicita %d de RAM' % (env.now, name, mem))
    yield ram.get(mem)
    print('%5.1f La petici√≥n es acpetada, %s ha ocupado %d de RAM' % (env.now, name, mem))
    yield env.process(ready_running(env, tgen, mem, name, ins))

def ready_running(env, tgen, mem, name, ins):
    insCpu= 0
    while insCpu<ins:
        print('%5.1f (Ready)%s ' % (env.now, name))
        with cpuC.request() as reqC:
            if (ins-insCpu)>= vel:
                insHechas = vel
            else:
                insHechas = ins-insCpu
        print('%5.1f (Running)El CPU ha realizado %d instrucciones del %s (%d/%d)' % (env.now,  insHechas, name, insCpu+insHechas, ins ))
        yield env.timeout(insHechas/vel) 
        insCpu = insCpu + insHechas
        wait=azar.randint(1,2)
        if wait == 1 and insCpu<ins:
            print('%5.1f (Waiting)%s' % (env.now, name))
            yield env.timeout(azar.uniform(0.5,1.5))
    print('%5.1f (Terminated)%s' % (env.now, name))
    yield ram.put(mem)
        
        
        

nPro=25
azar = Random(12345)
env = simpy.Environment()
vel = 3;
cpuC = simpy.Resource (env, capacity=1)
ram = simpy.Container(env, init=100, capacity=100)
for i in range(nPro):
    mem=azar.randint(1,10)
    name= "Proceso "+ str(i+1)
    ins=azar.randint(1,10)
    tgen= azar.expovariate(1.0/10)
    env.process(new(env, tgen, mem, name, ins))
env.run(100000)

